# version_1
ENGLISH:
THERE ARE A TWO PACKAGES, first - "abstarct_classes", where i tried use a polymorphism and abstract classes to write 
a combortable and beautiful code. Here's an abstract class named "Vehicle", inheritor-class "Car" and inheritor-class "Truck", 
also an "usable" classes called "TuningService" and "Scales", what contaion public voids to interact with vehicles and change 
them parametres, like clean vehicle or fill up. Maybe i should realise "TuningService" and "Scales" throught interfaces, but in future.
second package - "stupid_abstract_classes", where i tried write a wrong and ugly code without abstarct classes to 
understand the comfort of abstract classes, YOU DON'T NEED IT!

RUSSIAN:
Здесь находятся два пакета, первый - "abstract_classes", в переводе "абстрактные классы", 
где я изучал возможности полиморфизма и абстрактных классов для написания красивого и удобного когда, "без костылей". 
В этой папке находится абстрактный класс с названием "Vehicle", что в переводе - "транспортное средство", в котором я описал 
основные поля и методы, которые должны быть у любого класса, который будет наследовать класс "Vehicle". Также в этом пакете 
лежат два класса-наследника с именами "Car" и "Truck", которые имеют за собой уже используемые наследники "ToyotaCamry" и 
"Kamaz". Также здесь находятся "функциональные классы" под названиями "TuningService" (Тюнинг Сервис) и "Scales" (Весы для т/с). 
Они позволяют взаимодействовать с классами транспортных средств и изменять их параметры, к примеру заправить т/с или помыть его.
Возможно, мне стоило реализовать функционал "TuningService" и "Scales" через интерфейсы.
Вторая папка "stupid_abstract_classes", где я пытался сделать всё то же самое, что и выше, но без абстрактных классов, 
используя большое количество "костылей". ВАМ НЕ НУЖЕН ЭТОТ КОД, ОН УЖАСЕН!
